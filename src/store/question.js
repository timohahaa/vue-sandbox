const data = [
    ['Алгоритмическая сложность. Понятие алгоритма. Формы записи. Асимптотический анализ', 4.84],
    ['Алгоритмы поиска. Линейный поиск и бинарный поиск', 1.84],
    ['Поиск подстроки в строке: основные понятия (постановка задачи, алфавит, цепочки). Простой поиск', 2.11],
    ['Поиск подстроки в строке: основные понятия (постановка задачи, алфавит, цепочки). Алгоритм Рабина-Карпа', 4.05],
    ['Поиск подстроки в строке. Алгоритм Кнута-Мориса-Пратта,', 5.55],
    ['Поиск подстроки в строке. Алгоритм Боуера-Мура', 4.66],
    ['Линейные структуры данных. Списки. Динамический массив', 2.73],
    ['Линейные структуры данных. Списки. Связный и двусвязный списки', 3.00],
    ['Линейные структуры данных. Очереди. Кольцевые очереди. Стеки. Деки. Алгоритм сортировочной станции', 4.82],
    ['Ассоциативные массивы и хэш-таблицы', 4.36],
    ['Деревья. Дерево поиска и бинарное дерево поиска. Основные понятия', 3.75],
    ['Сбалансированные деревья. Основные понятия. Малый и большой повороты дерева. Обходы дерева.', 5.20],
    ['Сбалансированные деревья. АВЛ-деревья. Алгоритм добавления нового узла', 5.95],
    ['Сбалансированные деревья. АВЛ-деревья. Алгоритм удаления существующего узла', 6.23],
    ['Сбалансированные деревья. Красно-чёрные деревья. Алгоритм добавления нового узла', 7.52],
    ['Сбалансированные деревья. Красно-чёрные деревья. Алгоритм удаления существующего узла', 8.50],
    ['Сбалансированные деревья. B-деревья. 2-3-4 деревья. Основные понятия', 6.68],
    ['Сбалансированные деревья. 2-3-4 деревья. Алгоритм добавления нового ключа', 7.55],
    ['Сбалансированные деревья. 2-3-4 деревья. Алгоритм удаления существующего ключа', 7.95],
    ['Сортировка сравнениями. Пузырьковая сортировка (bubble)', 2.16],
    ['Сортировка сравнениями. Сортировка вставками (insertion)', 2.43],
    ['Сортировка сравнениями. Селекционная сортировка (selection)', 2.43],
    ['Сортировка «разделяй и властвуй». Сортировка слияниями (merge-sort)', 3.64],
    ['Сортировка «разделяй и властвуй». Быстрая сортировка (quick-sort)', 3.89],
    ['Сортировка с использованием деревьев. Пирамидальная сортировка (heap-sort)', 5.34],
    ['Поразрядные, блочные сортировки и сортировка подсчётом', 4.86],
    ['Графы. Основные понятия. Поиск в ширину. Поиск в глубину. Топологическая сортировка и поиск кратчайшего пути', 5.45],
    ['Графы. Построение минимального остовного дерева. Алгоритм Прима', 4.16],
    ['Графы. Построение минимального остовного дерева. Алгоритм Крускала', 4.09],
];

data.sort((a, b) => {
    if (a[1] < b[1]) {
        return -1;
    }
    if (a[1] > b[1]) {
        return 1;
    }
    return 0;
});
data.reverse();

export const questions = []

for (let i = 0; i < data.length; i++) {
    const q = {
        idx: i + 1,
        text: data[i][0],
        difficulty: data[i][1]
    }
    questions.push(q)
}
